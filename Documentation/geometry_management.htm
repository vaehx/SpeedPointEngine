<html>
<head>
<link rel="stylesheet" href="content.css" type="text/css">
</head>
<body>


<h1>Geometry management</h1>
<h2>Material handling</h2>
<ul>
    <li>Current: Materials stored separately in objects</li>
    <li>Goal: One common material pool</li>
</ul>
<h2>Structure</h2>
<pre>
class Geometry : public IGeometry
{
    IVertexBuffer* m_pVertexBuffer;
    IIndexBuffer** m_pIndexBuffers;
    unsigned short m_nIndexBuffers;
    EPrimitiveType m_PrimitiveType;
}
</pre>
<ul>    
    <li>One VB per Object, multiple IB per Geometry (one per material)</li>
    <li>Geometry can be handled any arbitrary way, no fixed usage. Depends on IObject implementation</li>
    <li>Difficulty: Merging different concepts of other applications (3ds, wavefront obj, ...)
        <ul>
            <li>3ds: made for smoothing groups, today often missing any normal or texture coordinate information</li>
            <li>obj: Contains normals and texture coordinates unrelated to vertices, face descriptions combine them</li>
        </ul>        
    </li>
    <li>Approach: Load as many information as possible into unified structues (see below), then simplify
        <ul>
            <li>each approach supports non-indexed meshes, store each vertex of each face (face = triangle)</li>
            <li>simplify the geometry as shown below to prevent streaming duplicates</li>            
        </ul>
    </li>    
    
</ul>

<h2>Geometry simplification</h2>

<ul>
<li>check if there are normals or smoothing groups available</li>
            <li>if there is nothing at all:
                <ul>
                    <li>recalculate using cross product for each face: <code>n = cross(vtx2 - vtx1, vtx3 - vtx1);</code></li>
                    <li>continue with normals</li>
                </ul>
            </li>            
            <li>if there are normals:
                <ul>                    
                    <li>merge vertices that share the same position AND normal (relatively rare case)</li>
                    <li>replace indices</li>
                    <li><pre>
void merge_vertices(Vertex** pOutVerts, uint* pnOutVerts, Index** pOutIndices, uint* pnOutIndices,
	const Vertex* pVertices, const uint nVertices, const Index* pIndices, const uint nIndices)
{
	for each vertex in pVertices do
		found = false
		for each outVertex in pOutVerts do
			if vertex.position == outVertex.position && vertex.normal == outVertex.normal then
				add index of outVertex to pOutIndices
				increase (*pnOutIndices)
				found = true
				break
			endif
		endfor
		if !found then
			add vertex to pOutVerts with index newVertIndex
			add newVertIndex to pOutIndices
			increase (*pnOutVertices) and (*pnOutIndices)
		endif
	endfor
}</pre>
					</li>
                </ul>
            </li>
            <li>if there are smoothing groups:
                <ul>
                    <li>merge vertices that at least share same position. Average their normals</li>
                    <li>replace indices</li>
                </ul>
            </li>
</ul>


</body>
</html>