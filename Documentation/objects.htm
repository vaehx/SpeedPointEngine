<html>
<head>
<link rel="stylesheet" href="content.css" type="text/css">
</head>
<body>


<h1>Objects</h1>
<p>In SpeedPoint Engine, everything that has a position is represented as an <code>IEntity</code>.<br />
Entities can either own high-level components (<code>ent->CreateComponent<MyWeapon>()</code>) or have a low-level components
(<code>ent->AddComponent(p3DEngine->CreateMesh())</code>).</p>

<p>
This is an example of the structure for the RenderMesh component:<br />
<img src="img/cd_render_mesh.png" /><br />
</p>

<p>
To create an entity with a RenderMesh from existing geometry in code:<br />
<pre>
SInitialGeometryDesc geom;
// Setup geom here...

IEntity* entity = scene->SpawnEntity();
entity->AddComponent(engine->Get3DEngine()->CreateMesh(SRenderMeshParams(&geom)));
</pre>
</p>

<p>
To load a model and spawn a new entity for it:<br />
<pre>
// Spawn an entity
IEntity* pEntity = pScene->SpawnEntity("my_tree");

// Get absolute resource path
string file = pResourcePool->GetResourcePath("models\\tree.spm");

// Load the geometry and create the RenderMesh from it
SInitialGeometryDesc* pGeometry = p3DEngine->GetGeometryManager()->LoadGeometry(file)
SRenderMeshParams meshParams(pGeometry);
pEntity->AddComponent(p3DEngine->CreateMesh(meshParams));

</pre>
</p>

<p>
You can attach entities to other entities as a child:<br />
<pre>
IEntity *playerEntity, *weapon;
...
playerEntity->AddChild(weapon);
</pre>
</p>

<h1>Entity receipts</h1>
<p>
To easily bootstrap entities with the same components and additional entity properties, entity receipts can be used.<br />
Entity receipts also allow for easy serialization of new entities over the network or from a world file, e.g.:<br />
<pre>
string receiptName = entityContainer->GetString("entityReceipt");
IEntityReceipt* receipt = engine->GetEntityReceiptManager()->GetReceipt(receiptName);
scene->SpawnEntity(receipt);
</pre>
</p>
<p>
To define and register a custom entity receipt:<br />
<pre>
class Actor : public IComponent
{
private:
	unsigned short m_Health; // 0-100
public: // IComponent
	virtual void SetEntity(IEntity* entity);
public:	
	unsigned short GetHealth() const { return m_Health; }
	void SetHealth(unsigned short health) { m_Health = health; }
};

void Actor::SetEntity(IEntity* entity)
{
	IComponent::SetEntity(entity);
	entity->RegisterProperty();
}


class ActorReceipt : public IEntityReceipt
{
public:
	ActorReceipt();
	virtual bool Apply(IEntity* entity);
	virtual const char* GetName() const
	{
		return "ActorReceipt";
	}
};

ActorReceipt::ActorReceipt()
{
	Inherit<EntityReceipts::RigidBody>();
}

bool ActorReceipt::Apply(IEntity* entity)
{
	if (!entity)
		return false;

	// Apply inherited receipts
	if (!IEntityReceipt::Apply(entity))
		return false;

	// Apply actor components and properties
	entity->CreateComponent<Actor>();
}
</pre>
</p>

</body>
</html>